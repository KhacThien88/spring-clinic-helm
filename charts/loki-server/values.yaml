appName: loki-server
env: dev
replicas: 1
service:
  port: 3100
  image: grafana/loki:latest
ingress:
  enabled: true
  domainName: loki-server-dev.khacthienit.click
  path: /
  pathType: Prefix
global:
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"
loki:
  config: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    schema_config:
      configs:
        - from: 2020-10-24
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h
alloy:
  config: |
    logging {
      level  = "info"
      format = "logfmt"
    }
    
    otelcol.receiver.zipkin "zipkin" {
      endpoint = "0.0.0.0:9411"
    }
    
    otelcol.exporter.zipkin "zipkin_backend" {
      endpoint = "http://zipkin-server:9411/api/v2/spans"
      format   = "json"
    }
    
    otelcol.pipeline "traces" {
      receivers = [otelcol.receiver.zipkin.zipkin]
      exporters = [otelcol.exporter.zipkin.zipkin_backend]
    }
    
    prometheus.scrape "app_metrics" {
      targets = [
        {
          "__address__" = "petclinic-api-gateway-service:8080",
          "__metrics_path__" = "/actuator/prometheus",
        },
      ]
      forward_to = [prometheus.remote_write.prom.receiver]
    }
    
    prometheus.remote_write "prom" {
      endpoint {
        url = "http://prometheus-server:9090/api/v1/write"
      }
    }
    
    discovery.kubernetes "pods" {
      role = "pod"
      namespaces {
        names = ["petclinic-review"]
      }
    }
    
    discovery.relabel "pods" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        action = "replace"
        target_label = "app"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }
    }
    
    local.file_match "pods" {
      path_targets = discovery.relabel.pods.output
    }
    
    loki.source.file "pods" {
      targets = local.file_match.pods.targets
      forward_to = [loki.process.process_logs.receiver]
    }
    
    loki.process "process_logs" {
      stage.docker {}
      stage.regex {
        expression = ".*traceID=(?P<traceID>[a-z0-9]+).*"
      }
      forward_to = [loki.write.loki.receiver]
    }
    
    loki.write "loki" {
      endpoint {
        url = "http://loki-server-service:3100/loki/api/v1/push"
      }
    }