apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-{{ .Values.env }}-deployment"
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.appName }}
    env: {{ .Values.env }}
spec:
  replicas: {{ .Values.replicas | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
        env: {{ .Values.env }}
    spec:
      {{- if .Values.global.tolerations }}
      tolerations:
        {{- toYaml .Values.global.tolerations | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.appName }}
          image: {{ .Values.service.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.service.adminPassword | quote }}
            - name: GF_SERVER_ROOT_URL
              value: https://{{ .Values.ingress.domainName }}
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          volumeMounts:
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-storage
              mountPath: /var/lib/grafana
              subPath: grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 5
      volumes:
        - name: datasources
          configMap:
            name: {{ .Values.appName }}-{{ .Values.env }}-datasources
        - name: grafana-storage
          emptyDir: {}